import{ab as e,M as o,N as i,L as s,$ as n,W as t,ac as p,a1 as l}from"./framework-b36c0771.js";const c={},u={href:"https://play.kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},r=s("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/aa8-OzSAZe8",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),k={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=33&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JVM",target:"_blank",rel:"noopener noreferrer"},d={href:"https://kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},m=p(`<table border="1"><tbody><tr><td> </td><td><p dir="ltr"><strong>DYDIS</strong></p></td><td><p dir="ltr"><strong>PAGAL NUTYLĖJIMĄ</strong></p></td><td><p dir="ltr"><strong>PAVYZDYS</strong></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Boolean</strong></span></p></td><td><p dir="ltr"><span>1 bit</span></p></td><td> </td><td><p dir="ltr"><span>True, false</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Byte</strong></span></p></td><td><p dir="ltr"><span>8 bit</span></p></td><td rowspan="5"><p dir="ltr"><span>Visus kintamuosius reikia inicijuoti</span></p><p><span> </span></p></td><td><p dir="ltr"><span>-127 iki 128</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Char</strong></span></p></td><td><p dir="ltr"><span>16 bit</span></p></td><td><p dir="ltr"><span>‘A’, ‘\\\\n’, ‘\\\\101’, ‘2’ </span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Short</strong></span></p></td><td><p dir="ltr"><span>16 bit</span></p></td><td><p dir="ltr"><span>-1, 0, 1</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Int</strong></span></p></td><td><p dir="ltr"><span>32 bit</span></p></td><td><p dir="ltr"><span>-2, -1, 0, 1, 2</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Long</strong></span></p></td><td><p dir="ltr"><span>64 bit</span></p></td><td><p dir="ltr"><span>-2L, -1L, 0, 1L, 2L</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Float</strong></span></p></td><td><p dir="ltr"><span>32 bit</span></p></td><td> </td><td><p dir="ltr"><span>3.4f, 3.9F</span></p></td></tr><tr><td><p dir="ltr"><span style="color:#0000ff;"><strong>Double</strong></span></p></td><td><p dir="ltr"><span>64 bit</span></p></td><td> </td><td><p dir="ltr"><span>3.7d, 3.5D</span></p></td></tr></tbody></table><h4 id="kotlin-kintamieji-aprasomi-naudojant-var-arba-val-raktinius-zodzius" tabindex="-1"><a class="header-anchor" href="#kotlin-kintamieji-aprasomi-naudojant-var-arba-val-raktinius-zodzius" aria-hidden="true">#</a> Kotlin kintamieji aprašomi naudojant <strong>var</strong> arba <strong>val</strong> raktinius žodžius:</h4><ul><li><p><strong>var</strong> - nusako jog kintamasis bus redaguojamas (angl. Mutable).</p></li><li><p><strong>val</strong> - nusako jog kintamasis nebus redaguojamas (angl. Immutable).</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> skaicius <span class="token operator">=</span> <span class="token number">50</span> <span class="token comment">// reikšmė, kurios negalime keisti (angl. immutable)</span>
<span class="token keyword">var</span> vardas <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Petras&quot;</span></span> <span class="token comment">// Vardą galėsime pakeisti bet kada (angl. mutable)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kotlin-lateinit-raktinis-zodis" tabindex="-1"><a class="header-anchor" href="#kotlin-lateinit-raktinis-zodis" aria-hidden="true">#</a> Kotlin lateinit raktinis žodis:</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">lateinit</span> <span class="token keyword">var</span> url<span class="token operator">:</span> String <span class="token comment">// Pažadame, kad inicijuosime</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Url adresas: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">url</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// Sulaužome pažadą (Error)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>lateinit - skirtas inicijuoti reikšmę vėliau.</li><li>Jeigu sulaužome pažadą ir neinicijuojame, &quot;url&quot; kompiliatorius išves klaidos pranešimą:</li><li>kotlin.UninitializedPropertyAccessException: lateinit property url has not been initialized</li></ul><h4 id="kotlin-by-lazy-raktinis-zodis" tabindex="-1"><a class="header-anchor" href="#kotlin-by-lazy-raktinis-zodis" aria-hidden="true">#</a> Kotlin by lazy raktinis žodis:</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> valiuta<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;EUR&quot;</span></span> 
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pagrindinė valiuta!!!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Nepanaudojus kintamojo &quot;valiuta&quot; bus švaistoma atmintis, nes objektas yra inicijuotas.</li><li>Šią problemą išspręsti naudosime by lazy.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> valiuta<span class="token operator">:</span> String <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
  <span class="token string-literal singleline"><span class="token string">&quot;EUR&quot;</span></span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Panaudojus kintamąjį &quot;valiuta&quot; reikšmė bus inicijuota vieną kartą. Sekantį kartą reikšmė bus paimta iš CACHE atminties.</li><li>Kintamasis valiuta su &quot;lazy&quot; nebus inicijuojamas tol, kol nebus panaudotas programiniame kode.</li><li>lazy galima naudoti su var, val, nullable arba non-nullable.</li><li>Thread safety - pirma gija, kuri inicijavo reikšmę, visos kitos gijos matys reikšmę iš CACHE atminties.</li></ul><h4 id="kotlin-string-interpoliacija-10-20" tabindex="-1"><a class="header-anchor" href="#kotlin-string-interpoliacija-10-20" aria-hidden="true">#</a> Kotlin String interpoliacija <code>&quot;\${10+20}&quot;</code>:</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> suma<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span>
<span class="token keyword">var</span> tekstas<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Suma=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">suma</span></span><span class="token string">&quot;</span></span>
<span class="token function">println</span><span class="token punctuation">(</span>tekstas<span class="token punctuation">)</span> <span class="token comment">// Suma=30</span>
tekstas <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Suma padauginta iš 5= </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">suma <span class="token operator">*</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token function">println</span><span class="token punctuation">(</span>tekstas<span class="token punctuation">)</span> <span class="token comment">// Suma padauginta iš 5=150</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin ( ? ) - null referece:</p>`,15),g=s("li",null,'Pagal nutylėjimą Kotlin neturi "null reference" ir tikslas yra eliminuoti NullPointerException.',-1),b={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> zinute<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Sveikas :)&quot;</span></span>
zinute <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// kompiliatoriaus klaida</span>

<span class="token keyword">var</span> zinute<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Sveikas :)&quot;</span></span>
zinute <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// Viskas gerai</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Kotlin ( ?: ) - Elvis Operatorius*</li><li>Jeigu b yra null tada grąžiname -1 (Įprastinis sakinio užrašymas):</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> l<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> b<span class="token punctuation">.</span>length <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Galima pakeisti į supaprastintą išraišką: (Elvis operatorius ?😃</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> l <span class="token operator">=</span> b<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">?:</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Lambda išraiška bus vykdoma jeigu reikšmė bus ne null.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> l <span class="token operator">=</span> b<span class="token operator">?</span><span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jei ne NULL&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Kotlin ( !! ) - operatorius not-null</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> l <span class="token operator">=</span> b<span class="token operator">!!</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Jeigu b yra null tada kompiliatorius išves pranešimą kotlin.KotlinNullPointerException</li><li>Saugus tipų konvertavimas jeigu grąžinamas objektas yra kito tipo jis grąžins null vietoj ClassCastException.</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> aInt<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> a <span class="token keyword">as</span><span class="token operator">?</span> Int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Kotlin Kolekcijos su null tipo objektais:</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nullList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> intList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> nullList<span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Jeigu <strong>asmuo</strong> arba <strong>asmuo.skyrius</strong> yra null, tada funkcija println(..) nebus iškviečiama:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>asmuo<span class="token operator">?</span><span class="token punctuation">.</span>skyrius<span class="token operator">?</span><span class="token punctuation">.</span>direktorius <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;VISKAS TVARKOJE!&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin intervalas arba ciklas for:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//o: 1, 2, 3, 4</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">4</span> downTo <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//o: 4, 3, 2, 1</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//o: 1, 3</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">4</span> downTo <span class="token number">1</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//o: 4, 2</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">10</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//o: nuo 1 iki 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Funkcijos - aprašomos naudojant <code>fun &lt;pavadinimas&gt;(&lt;Parametrų sąrašas&gt;) : &lt;Grąžinama reikšmė&gt;{....}</code>, funkcijos parametrams galima nurodyti reikšmę pagal nutylėjimą.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sudeti</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> b <span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>

  <span class="token keyword">return</span> a <span class="token operator">+</span> b

<span class="token punctuation">}</span>

<span class="token comment">// Sutrumpintas variantas atliekantis tą patį veiksmą</span>

<span class="token keyword">fun</span> <span class="token function">sudeti</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> b <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin funkcija, kuri nieko negrąžina aprašoma taip:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">zinute</span><span class="token punctuation">(</span>tekstas<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Unit<span class="token punctuation">{</span> <span class="token comment">// Pagal nutylėjimą grąžina Unit tipą (Unit neprivaloma rašyti).</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Sveikas: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">tekstas</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin (funkcijos - vararg, * - spread operatorius)</p><p>vararg (kintamas param skaičius) - norint perduoti kolekciją kaip vararg reikia naudoti spread operatorių *.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">spausdinti</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> zodziai<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>zodziai<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// * - spread</span>
  <span class="token function">spausdinti</span><span class="token punctuation">(</span>zodziai <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;bye&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;yes&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin (funkcijos, su lambda parametru). Jeigu funkcijos paskutinis parametras yra lambda galima perduoti be skliaustų ():</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> HTML <span class="token punctuation">{</span>
  <span class="token keyword">fun</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">init</span><span class="token operator">:</span> HTML<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> HTML <span class="token punctuation">{</span>
  <span class="token keyword">val</span> html <span class="token operator">=</span> <span class="token function">HTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// create the receiver object</span>
  html<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// pass the receiver object</span>
 <span class="token keyword">return</span> html
<span class="token punctuation">}</span>
html <span class="token punctuation">{</span>       <span class="token comment">// lambda with receiver begins here</span>
  <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// calling a method on the receiver</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),f={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=44&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: generic",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">singletonList</span><span class="token punctuation">(</span>item<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> <span class="token function">listOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin high order funkcijos: run, apply, also, let, with. High order funkcijos - funkcijos, kurios automatiškai įvykdo funkciją esančia bloko viduje:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> 
  <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> 
  <span class="token keyword">var</span> job<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">fun</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Extension funkcija</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Įprastinis užrašymo būdas:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">val</span> jonas <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jonas&quot;</span></span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Dėstytojas&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">val</span> petras <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Petras&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Programeris&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">val</span> vyresnis <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>jonas<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> petras<span class="token punctuation">.</span>age<span class="token punctuation">)</span> jonas <span class="token keyword">else</span> petras
  vyresnis<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>run { }</strong> - funkcija įvykdo bloke esančią funkciją ir gražina rezultatą: šiuo atveju jonas arba petras egzempliorių.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>run <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>jonas<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> petras<span class="token punctuation">.</span>age<span class="token punctuation">)</span> jonas <span class="token keyword">else</span> petras
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
jonas<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span><span class="token comment">// jonas?.run jeigu null run nevykdys  </span>
   age <span class="token operator">=</span> <span class="token number">30</span>
   <span class="token string-literal singleline"><span class="token string">&quot;jono amzius: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span>
 <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>with { }</strong> - bloke aprašyti algoritmą nereikia kartoti objekto egzemplioriaus pvz: &quot;jonas.age&quot;, &quot;jonas.job&quot; pavadinimo:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">with</span><span class="token punctuation">(</span>jonas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   age <span class="token operator">=</span> <span class="token number">29</span>
   <span class="token string-literal singleline"><span class="token string">&quot;jono amzius: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span>
 <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>let { }</strong> - galima pervadinti objekto egzemplioriaus pavadinimą ir nurodyti kokį rezultatą grąžiname:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>petras<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span>pet <span class="token operator">-&gt;</span>
   pet<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span>
   pet<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Picos kepėjas&quot;</span></span>
   <span class="token string-literal singleline"><span class="token string">&quot;Petro profesija: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pet<span class="token punctuation">.</span>job</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>apply{ }</strong> - funkcija priima objekto instance (this) ir grąžina modifikuoto instance reference (this):</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>petras<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
 age <span class="token operator">=</span> <span class="token number">40</span>
 job <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Skyriaus vadovas&quot;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>also { }</strong> - funkcija priima (<strong>it</strong>) parametrą ir grąžina modifikuoto instance reference (this). Ši funkcija leidžia pervadinti objekto instance į norimą pavadinimą:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>petras<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
 it<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span>
 it<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Picos kepėjas&quot;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Kotlin klasės</strong></p><p>Kotlin klasė - Tuščią klasę aprašyti galima tiesiog naudojant raktinį žodį <code>class&lt;pavadinimas&gt;</code>:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Zmogus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Pirminis konstruktorius - aprašomas tiesiai po klasės pavadinimo skliausteliuose, o jo parametrai kaip ir įprasta aprašant bet, kurią funkciją:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Zmogus</span><span class="token punctuation">(</span>vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Papildomas konstruktorius - Papildomą konstruktorių galima aprašyti tokiu būdu:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Zmogus</span><span class="token punctuation">(</span>vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">constructor</span><span class="token punctuation">(</span>vardas<span class="token operator">:</span> String<span class="token punctuation">,</span>
             pavarde<span class="token operator">:</span> String<span class="token punctuation">,</span>
             amzius<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>vardas<span class="token punctuation">,</span> pavarde<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kadangi klasės pirminis konstruktorius neturi aprašomojo bloko vykdyti kodui, papildomai yra numatytas init blokas leidžiantis inicijuoti bloką/-us, kai sukursime Objekto egzempliorių įvykdysime visus žemiau aprašytus init blokus iš eilės.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Zmogus</span><span class="token punctuation">(</span>vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">init</span> <span class="token punctuation">{</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Zmogaus vardas: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">vardas</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Taip pat konstruktoriaus parametrus galima pasiekti ir aprašant klasės kintamuosius (angl. properties):</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Zmogus</span><span class="token punctuation">(</span>vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">val</span> vardasDidziosiomis <span class="token operator">=</span> vardas<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Konstruktorius gali turėti read-only - val (tik skaityti) arba Mutable - var (kintama reikšmė):</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Zmogus</span><span class="token punctuation">(</span><span class="token keyword">val</span> vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">var</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Jeigu pirminis konstruktorius yra pažymėtas anotacija arba uždėtas motomumo modifikatorius pvz: public visada privalote naudoti constructor raktinį žodį.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Zmogus <span class="token keyword">public</span> <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">val</span> vardas<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">var</span> pavarde<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Uždrausime kurti klasės egzempliorių, jeigu nenorime turėti public default konstruktoriaus paskelbiame private.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> NeleidziuKurtiEgzempl <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Norint sukurti klasės egzempliorių rekomenduojama naudoti val.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> saskaita <span class="token operator">=</span> <span class="token function">Invoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> klientas <span class="token operator">=</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Petras Petraitis&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin paveldėjimas:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Pavyzdys 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36),w={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>Any klasė turi šias funkcijas: equals(), hashCode(), toString(). Kotlin negalima paveldėti klasių, kurios nėra pažymėtos open. Dvitaškis nurodo jog paveldėsime klasę Tėvinė.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> Tėvinė<span class="token punctuation">(</span>p<span class="token operator">:</span> Int<span class="token punctuation">)</span>
<span class="token keyword">class</span> Vaikinė<span class="token punctuation">(</span>p<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Tėvinė<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Delegation</strong> - užduoties perdavimas kitam pvz. Yra du automobiliai lengvasis ir krovininis, kartais pervežant krovinį lengvasis automobilis tiesiog dėl techninių kliūčių negali vežti krovinio todėl perduoda jį krovininiui automobiliui.</p><p><strong>Observable</strong> - Kai keisime reikšmę automatiškai įvykdys kodą esantį <strong>{}.</strong> Taip pat visada gausime senąją reikšmę bei naująją reikšmę, esant poreikiui galima gauti ir pradinę reikšmę.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> User <span class="token punctuation">{</span>
 <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;no name&gt;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     prop<span class="token punctuation">,</span> old<span class="token punctuation">,</span> new <span class="token operator">-&gt;</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">old</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">new</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q=s("strong",null,"Kotlin data class",-1),S={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Studentas</span><span class="token punctuation">(</span><span class="token keyword">val</span> vardas<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> amzius<span class="token operator">:</span> Int<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Pastaba</strong>. data class negali būti paskelbtos abstrakčiomis klasėmės, taip pat negali būti galutinės (angl. sealed) arba vidinės (angl. inner). Sukūrus data class yra sugeneruojami šie metodai: get/set, toString, hashCode, copy metodai. Norint nukopijuoti reikšmę iš sukurto objekto egzemplioriaus pvz:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> petriukas <span class="token operator">=</span> <span class="token function">Studentas</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Petriukas&quot;</span></span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> kitasPetriukas <span class="token operator">=</span> petriukas<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>amzius <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>kitasPetriukas<span class="token punctuation">)</span> <span class="token comment">// Studentas(vardas=Petriukas, amzius=25)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Data Classes and Destructuring Declarations</strong></p><p>Component functions generated for data classes enable their use in destructuring declarations:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> jane <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jane&quot;</span></span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span> 
<span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> jane
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years of age&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// prints &quot;Jane, 35 years of age&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Standard Data Classes</strong></p><p>The standard library provides Pair and Triple. In most cases, though, named data classes are a better design choice, because they make the code more readable by providing meaningful names for properties.</p><h3 id="overloaded-methods" tabindex="-1"><a class="header-anchor" href="#overloaded-methods" aria-hidden="true">#</a> Overloaded methods</h3>`,9),_={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},z=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token keyword">double</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token keyword">double</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},A={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},I=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">metodas</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Žymiai paprasčiau nereikia aprašyti visų įmanomų atvejų!!!</span>
    <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token function">metodas</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">33.9</span><span class="token punctuation">)</span>
    <span class="token function">metodas</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22.9</span><span class="token punctuation">)</span>
    <span class="token function">metodas</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">22.8</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dar vienas pavyzdys palyginimui Java prieš Kotlin aprašant overloaded metodus</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//--------------------------------------------Java-----------------------------------------------//</span>
<span class="token keyword">package</span> <span class="token namespace">overloadedMethods</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverloadedMethodJava</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span> 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Message: %s\\n&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">{</span> 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Message: %s, Prefix: %s\\n&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token punctuation">{</span> 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Message: %s, Prefix: %s, Suffix: %s\\n&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">OverloadedMethodJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">OverloadedMethodJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithPRefix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">OverloadedMethodJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithPRefix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AndSuffix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//--------------------------------------------Kotlin-----------------------------------------------//</span>
<span class="token keyword">package</span> overloadedMethods

<span class="token keyword">class</span> OverloadedMethodKotlin <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">printMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">,</span> prefix<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> suffix<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">message</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">prefix</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">suffix</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> overloaded <span class="token operator">=</span> <span class="token function">OverloadedMethodKotlin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Immutable readonly</span>
    overloaded<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hi im Kotlin&quot;</span></span><span class="token punctuation">)</span>
    overloaded<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hi im Kotlin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;with prefix&quot;</span></span><span class="token punctuation">)</span>
    overloaded<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hi im Kotlin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;with prefix&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;AndSuffix&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">// Bet kokia tvarka pagal vardą parametro</span>
    overloaded<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello im Prefix&quot;</span></span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;im Kotlin&quot;</span></span><span class="token punctuation">,</span> suffix <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;And Suffix&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kotlin-pairs-ir-triples" tabindex="-1"><a class="header-anchor" href="#kotlin-pairs-ir-triples" aria-hidden="true">#</a> Kotlin Pairs ir Triples</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">grazinaPora</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kaire&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Desine&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> pora <span class="token operator">=</span> <span class="token function">grazinaPora</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pirmas narys: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pora<span class="token punctuation">.</span>first</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Antras narys: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pora<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Išvedamas tekstas į ekraną: <code>Pirmas narys: Kaire, Antras narys: Desine.</code> Aiškumui įvesti galima pakeisti first, second,…, ir t.t. į savo sugalvotus pavadinimus pvz:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> pora <span class="token operator">=</span> <span class="token function">grazinaPora</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>kaire_ranka<span class="token punctuation">,</span> desine_ranka<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">grazinaPora</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pirmas narys: &quot;</span></span><span class="token operator">+</span> kaire_ranka <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;, Antras narys:&quot;</span></span> <span class="token operator">+</span> desine_ranka<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pirmas narys: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pora<span class="token punctuation">.</span>first</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Antras narys: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pora<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Jeigu reikšmė yra nesvarbi naudojant reikšmių pervadinimą (angl. destructuring declarations) galima pavadinti naudojant underscore:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> <span class="token keyword">val</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> kita_reiksme<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">grazinaPora</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="typealias-kotlin" tabindex="-1"><a class="header-anchor" href="#typealias-kotlin" aria-hidden="true">#</a> TypeAlias Kotlin</h3><p>Jeigu naudosime šį typealias mes pakeičiame String į Int, gali būti situacija, kai reikia modifikuoti atgyvenusį kodą (angl. deprecated), kadangi pakeitus visur kompiliatorius pažymės raudonai tada galie nesunkiai pašalinti šį kodą arba pakeisti.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">typealias</span> String <span class="token operator">=</span> Int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="conditions-kotlin-rengiama" tabindex="-1"><a class="header-anchor" href="#conditions-kotlin-rengiama" aria-hidden="true">#</a> Conditions kotlin -&gt; rengiama…</h3><h3 id="extension-funkcijos" tabindex="-1"><a class="header-anchor" href="#extension-funkcijos" aria-hidden="true">#</a> Extension funkcijos</h3><p>Šios extension funkcijos yra labai patogios jeigu nusprendėte aprašyti naują funkciją jau egzistuojančioje klasėje. Nereikia papildomai sukurti klasės tada paveldėti ją ir galiausiai papildyti nauju metodu. Kotlin naudoja šią paprastą konstrukciją:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Duomenų klasė Studentas </span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Studentas</span><span class="token punctuation">(</span><span class="token keyword">val</span> vardas<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> amzius<span class="token operator">:</span> Int<span class="token punctuation">)</span>

<span class="token comment">// Esamom klasėm &quot;Bet kuriai egzistuojančiai&quot; galima papildyti naujomis funkcijomis pvz: </span>
<span class="token keyword">fun</span> Studentas<span class="token punctuation">.</span><span class="token function">suteiktiStipendija</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Studentui suteikta stipendija&quot;</span></span><span class="token punctuation">)</span>       
<span class="token punctuation">}</span>

<span class="token comment">// Klasė Studentas papildyta nauja funkcija tikrinam naujai sukurtą metodą.</span>
<span class="token keyword">fun</span> <span class="token function">extensionFunkcijosTestas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> stud <span class="token operator">=</span> <span class="token function">Studentas</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Joniukas&quot;</span></span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
    stud<span class="token punctuation">.</span><span class="token function">suteiktiStipendija</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Į ekraną bus išvedamas šis tekstas:</p><p><code>Studentui suteikta stipendija</code></p><p>Taip pat dar vienas pavyzdys turime String klasę, kuria papildysime nauju metodu pvz:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">pasisveikinimas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Sveiki aš esu simbolių eilutė: (angl. String)&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">extensionStringTestas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> testas <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    testas<span class="token punctuation">.</span><span class="token function">pasisveikinimas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token string-literal singleline"><span class="token string">&quot;bet_kokia_simboliu_eilute&quot;</span></span><span class="token punctuation">.</span><span class="token function">pasisveikinimas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Į ekraną bus išvedamas šis tekstas:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Sveiki aš esu simbolių eilutė<span class="token operator">:</span> <span class="token punctuation">(</span>angl<span class="token punctuation">.</span> String<span class="token punctuation">)</span>
Sveiki aš esu simbolių eilutė<span class="token operator">:</span> <span class="token punctuation">(</span>angl<span class="token punctuation">.</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Funkcija skaičiuojanti faktorialą naudojant rekursiją.</p><h3 id="operatoriu-perkrovimas" tabindex="-1"><a class="header-anchor" href="#operatoriu-perkrovimas" aria-hidden="true">#</a> Operatorių perkrovimas</h3><p>Operatorių pekrovimas yra tik Kotlin kalboje panašumai lyginant su C++ kalba, kurioje taip pat yra galimybė naudoti perkrautuosius operatorius. Žemiau yra pateikiamas pavyzdys kaip galima panaudoti (plus (+)) operatorių norint susumuoti keletą skirtingų objektų pagal svorį:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> overloadedoperators

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">MatavimoVnt</span><span class="token punctuation">(</span><span class="token keyword">val</span> svoris<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">KILOGRAMAS</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GRAMAS</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TONA</span> <span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> VaisiausSvoris<span class="token punctuation">{</span>
     <span class="token keyword">fun</span> <span class="token function">svoris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int
<span class="token punctuation">}</span>
<span class="token keyword">class</span> Pintine <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> sarasas <span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Vaisius<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">idetiIpintine</span><span class="token punctuation">(</span>vaisius<span class="token operator">:</span> Vaisius<span class="token punctuation">)</span> <span class="token operator">=</span> sarasas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vaisius<span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">pasverti</span><span class="token punctuation">(</span>matas<span class="token operator">:</span> MatavimoVnt <span class="token operator">=</span> MatavimoVnt<span class="token punctuation">.</span>GRAMAS<span class="token punctuation">)</span><span class="token operator">:</span>Int <span class="token punctuation">{</span>
       <span class="token keyword">return</span> sarasas<span class="token punctuation">.</span><span class="token function">sumBy</span> <span class="token punctuation">{</span> it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span>svoris <span class="token punctuation">}</span> <span class="token operator">/</span> matas<span class="token punctuation">.</span>svoris
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Perkrauto operatoriaus (angl. overloaded operator) aprašymas </span>
<span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Vaisius</span><span class="token punctuation">(</span><span class="token keyword">val</span> pavadinimas<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> svoris<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>vaisius<span class="token operator">:</span> Vaisius<span class="token punctuation">)</span> <span class="token operator">:</span> Vaisius<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Vaisius</span><span class="token punctuation">(</span>pavadinimas<span class="token punctuation">,</span> svoris <span class="token operator">+</span> vaisius<span class="token punctuation">.</span>svoris<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Slyva</span><span class="token punctuation">(</span>pavadinimas<span class="token operator">:</span>String<span class="token punctuation">,</span> svoris<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">Vaisius</span><span class="token punctuation">(</span>pavadinimas<span class="token punctuation">,</span> svoris<span class="token punctuation">)</span><span class="token punctuation">,</span> VaisiausSvoris<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">svoris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> svoris
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">Kriause</span><span class="token punctuation">(</span>pavadinimas<span class="token operator">:</span>String<span class="token punctuation">,</span> svoris<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">Vaisius</span><span class="token punctuation">(</span>pavadinimas<span class="token punctuation">,</span> svoris<span class="token punctuation">)</span><span class="token punctuation">,</span> VaisiausSvoris<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">svoris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> svoris
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">Obuolys</span><span class="token punctuation">(</span>pavadinimas<span class="token operator">:</span> String<span class="token punctuation">,</span> svoris<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">Vaisius</span><span class="token punctuation">(</span>pavadinimas<span class="token punctuation">,</span> svoris<span class="token punctuation">)</span><span class="token punctuation">,</span> VaisiausSvoris<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">svoris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> svoris
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> slyva <span class="token operator">=</span> <span class="token function">Slyva</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Anašpet&quot;</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> obuolys <span class="token operator">=</span> <span class="token function">Obuolys</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Auksis&quot;</span></span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> kriause <span class="token operator">=</span> <span class="token function">Kriause</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Aluona &quot;</span></span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> rezultatas <span class="token operator">=</span> slyva <span class="token operator">+</span> obuolys <span class="token operator">+</span> kriause

    <span class="token keyword">val</span> pintine <span class="token operator">=</span> <span class="token function">Pintine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pintine<span class="token punctuation">.</span><span class="token function">idetiIpintine</span><span class="token punctuation">(</span>slyva<span class="token punctuation">)</span>
        pintine<span class="token punctuation">.</span><span class="token function">idetiIpintine</span><span class="token punctuation">(</span>obuolys<span class="token punctuation">)</span>
        pintine<span class="token punctuation">.</span><span class="token function">idetiIpintine</span><span class="token punctuation">(</span>kriause<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Viso vaisių idėtų į pintinę: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pintine<span class="token punctuation">.</span><span class="token function">pasverti</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> g&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Viso vaisių idėtų į pintinę: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pintine<span class="token punctuation">.</span><span class="token function">pasverti</span><span class="token punctuation">(</span>MatavimoVnt<span class="token punctuation">.</span>KILOGRAMAS<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> kg&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Viso vaisių idėtų į pintinę: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">pintine<span class="token punctuation">.</span><span class="token function">pasverti</span><span class="token punctuation">(</span>MatavimoVnt<span class="token punctuation">.</span>TONA<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> t&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Viso vaisių naudojant overloaded operatorių (plus (+)): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">rezultatas<span class="token punctuation">.</span>svoris</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> g&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Įvykdžius programą į ekraną išvestas tekstas:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Viso vaisių idėtų į pintinę<span class="token operator">:</span> <span class="token number">15000000</span> g
Viso vaisių idėtų į pintinę<span class="token operator">:</span> <span class="token number">15000</span> kg
Viso vaisių idėtų į pintinę<span class="token operator">:</span> <span class="token number">15</span> t
Viso vaisių naudojant overloaded operatorių <span class="token punctuation">(</span><span class="token function">plus</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">750</span> g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sekantis pavyzdys iliūstruoja situacija kada naudojant įprastinį aprašymą BigDecimal klasės kodo skaitomumas suprastėja, šiai problemai išspręsti galima naudoti overloaded operatorius.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> overloadedoperators
<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal
<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">.</span>ONE

<span class="token keyword">class</span> Algoritmas <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">faktorialas</span><span class="token punctuation">(</span>n<span class="token operator">:</span> BigDecimal<span class="token punctuation">)</span><span class="token operator">:</span> BigDecimal <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ONE <span class="token keyword">else</span> <span class="token function">faktorialas</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> n
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> fakt <span class="token operator">=</span> <span class="token function">Algoritmas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>fakt<span class="token punctuation">.</span><span class="token function">faktorialas</span><span class="token punctuation">(</span><span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Įvykdžius šį kodą gausime Runtime klaidą kadangi tokio dydžio skaičiui reikia padidinti steką:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1221</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigDecimal</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4783</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigDecimal</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4790</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigDecimal</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1460</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">overloadedoperators<span class="token punctuation">.</span></span>Algoritmas</span><span class="token punctuation">.</span><span class="token function">faktorialas</span><span class="token punctuation">(</span><span class="token class-name">Faktorialas</span><span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Naudojant overloaded parametrus turėsime tokią realizaciją taip pat pakeisime taip kad ištaisyti prieš tai įvykusią klaidą kotlin kalboje yra naudojamas žodis <strong>tailrec</strong>:</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> overloadedoperators
<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal
<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">.</span>ONE

<span class="token keyword">class</span> Algoritmas <span class="token punctuation">{</span>
    <span class="token keyword">tailrec</span> <span class="token keyword">fun</span> <span class="token function">faktorialas</span><span class="token punctuation">(</span>n<span class="token operator">:</span> BigDecimal<span class="token punctuation">,</span> result<span class="token operator">:</span> BigDecimal <span class="token operator">=</span> ONE<span class="token punctuation">)</span><span class="token operator">:</span> BigDecimal <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> result <span class="token keyword">else</span> <span class="token function">faktorialas</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> result <span class="token operator">*</span> n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">operator</span> <span class="token keyword">fun</span> BigDecimal<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token function">BigDecimal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">operator</span> <span class="token keyword">fun</span> BigDecimal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token function">BigDecimal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> fakt <span class="token operator">=</span> <span class="token function">Algoritmas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>fakt<span class="token punctuation">.</span><span class="token function">faktorialas</span><span class="token punctuation">(</span><span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Įvykdžius programą bus paskaičiuojamas 30 000 faktorialas.</p><h3 id="filter-usage-collections" tabindex="-1"><a class="header-anchor" href="#filter-usage-collections" aria-hidden="true">#</a> Filter usage collections</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//--------------------------------------------Java----------------------------------------------//</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListExamples</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Petras&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Ona&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Birute&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        customers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Petras&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        customers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span> intStream <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        intStream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> v <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> v <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//--------------------------------------------Kotlin-----------------------------------------------//</span>
<span class="token keyword">package</span> listOfNumbers
<span class="token comment">// In JAVA CUSTOMER CLASS AROUND 100 lines with basic methods:)</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> customers <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span>listOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span>
            <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Petras&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jonas&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jonas&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
    customers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Customer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Ona&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;--------------------------------&quot;</span></span><span class="token punctuation">)</span>
    customers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span> <span class="token operator">+</span> it<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token comment">// number 1 to 100 similar to IntStream in JAVA</span>
    <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span>
    numbers<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">20</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span> <span class="token operator">+</span> it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),P={id:"singleton-design-pattern",tabindex:"-1"},D=s("a",{class:"header-anchor",href:"#singleton-design-pattern","aria-hidden":"true"},"#",-1),T={href:"https://eif-courses.github.io/java/domains/KOTLIN/#singleton-design-pattern",target:"_blank",rel:"noopener noreferrer"},O={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},J=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//--------------------------------------------Java-----------------------------------------------//</span>
<span class="token keyword">package</span> <span class="token namespace">singletonai</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Exists only to defeat instantiation.</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To pačio projektavimo šablono aprašymas naudojant programavimo kalbą kotlin.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//--------------------------------------------Kotlin-----------------------------------------------//</span>
<span class="token keyword">package</span> singletonai
<span class="token keyword">object</span> SingletonObject<span class="token punctuation">{</span>
    <span class="token keyword">val</span> property <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kazkas&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function M(V,B){const a=l("ExternalLinkIcon");return o(),i("div",null,[s("p",null,[n("Kotlin programavimo kalba yra suderinama su įvairiauisiomis šiuolaikinėmis programavimo aplinkomis IDE. Sintaksės susipažinimui galima naudoti Kotlin online: "),s("a",u,[n("https://play.kotlinlang.org/"),t(a)])]),r,s("p",null,[n("Taip pat plačiau susipažinti su šia "),s("a",k,[n("JVM"),t(a)]),n(" programavimo kalba Kotlin galite susipažinti oficialioje svetainėje: "),s("a",d,[n("https://kotlinlang.org/"),t(a)]),n(".")]),s("p",null,[n("Kotlin duomenų tipai: viskas yra objektai žemiau pateiktoje lentelėje nėra paminėtas tipas Any, kuris apibrėžia bet kokį tipą arba Kotlin kalboje vadinamas Unit, panašiai kaip "),s("a",v,[n("Java"),t(a)]),n(" kalbos Object tipas:")]),m,s("ul",null,[g,s("li",null,[n("Numatyta galimybė naudoti null (nullable references). Kam to reikia? Todėl, kad daugelis bibliotekų yra parašyti "),s("a",b,[n("Java"),t(a)]),n(" programavimo kalba ir tipai grąžina nullable reference.")])]),y,s("p",null,[n("Kotlin (funkcijos "),s("a",f,[n("Generic"),t(a)]),n(" tipas):")]),h,s("p",null,[n("Pagal nutylėjimą ši klasė paveldi Kotlin tipą Any, tai nėra analogas "),s("a",w,[n("java"),t(a)]),n(".lang.Object klasei.")]),j,s("p",null,[q,n(" Kotlin turi galimybę įgyvendinti duomenų klases vadinamas data class žemiau matysite kaip nesudėtingai galima aprašyti senąsias "),s("a",S,[n("JAVA"),t(a)]),n(" bean klases (POJO / POCO):")]),x,s("p",null,[n("Overloaded metodai "),s("a",_,[n("Java"),t(a)]),n(" kalboje aprašomi kiekvienam atvejui turi skirtis parametrų skaičius arba perduodamas tipas pvz: turime tokią aibę metodų:")]),z,s("p",null,[n("Kotlin kalboje šiek tiek paprasčiau kadangi yra įvedami įvardintieji parametrai (angl. named parameters) ir funkcijų parametrai gali turėti reikšmę pagal nutylėjimą (angl. by default) kas įgalina paprastesnį ir lankstesnį overloaded metodų aprašymą. Apžvelkime prieš tai aprašytą "),s("a",K,[n("Java"),t(a)]),n(" metodą realizuojant analogiškus metodus naudojant Kotlin programavimo kalbą. Kadangi Kotlin neturi metodų turi funkcijas tada galima aprašyti funkciją atitinkančią prieš tai aprašytuosius metodus "),s("a",A,[n("Java"),t(a)]),n(" kalboje.")]),I,s("h3",P,[D,n(" Singleton Design pattern"),s("a",T,[n("#"),t(a)])]),s("p",null,[n("Klasikinis projektavimo šablonas Singleton naudojant "),s("a",O,[n("java"),t(a)]),n(" programavimo kalbą.")]),J])}const E=e(c,[["render",M],["__file","kotlinjvm.html.vue"]]);export{E as default};
