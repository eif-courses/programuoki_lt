import{ab as p,M as o,N as i,L as a,$ as n,W as t,ac as e,a1 as c}from"./framework-b36c0771.js";const l={},u={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},r={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},k={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=44&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: generic",target:"_blank",rel:"noopener noreferrer"},m=a("li",null,"Įgalina naudoti funkcinį programavimą (angl. functional programming).",-1),v=a("li",null,"Palengvina kodo skaitomumą, sumažina kodo kiekį.",-1),g={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=45&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: APIs",target:"_blank",rel:"noopener noreferrer"},b=a("li",null,"Darbas su kolekcijomis (angl. Collections) tampa žymiai paprastesnis tiek kodo aiškumo prasme, tiek sukurtaisiais metodais skirtais išlygiagretinti programos vykdymą skirtą kompiuteriui turinčiam daugiau nei vieną branduolį.",-1),y=a("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/nBkeIW4kp9A",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),f={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=29&displayformat=dictionary",title:"DUK - Dažnai užduodami klausimai: JAVA JDK",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
   <span class="token class-name">Greeter</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},w=e(`<ol><li><p>Sukurti interfeisą pvz: Greeting ir jame vieną metodą perform();</p></li><li><p>Kiekvienai naujai elgsenai privalote sukurti klasę ir joje įgyvendinti metodą perform() iš interfeiso Greeting.</p></li></ol><p>Atlikus Greeter klasės greet() metodo modifikacija, kuriam perduosime norimą interfeiso egzempliorių (&quot;funkciją&quot;) kaip metodo parametrą.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">Greeting</span> greeting<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  greeting<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span> <span class="token comment">// Interfeisas Greeting </span>
  <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Interfeiso metodas perform();</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">implements</span> <span class="token class-name">Greeting</span><span class="token punctuation">{</span> <span class="token comment">// Interfeiso panaudojimas</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Metodo realizacija</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sveikas pasauli!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Greeter klasė po atliktos modifikacijos</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">Greeting</span> greeting<span class="token punctuation">)</span><span class="token punctuation">{</span>
    greeting<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Greeter</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kas yra Lambda? Anoniminė (izoliuota) vidinė funkcija. Bevardė funkcija be pasikartojančio (angl. boilerplate) kodo. Tenkina funkcinio interfeiso savoką. Interfeisas, kuris turi tik vieną abstraktų metodą. Lambda bendru atveju: <code>&lt;parametrų_sąrašas&gt; -&gt; &lt;funkcijos_kūnas&gt;. () - parametrų sąrašas, -&gt;</code> už strėlytės vykdomi sakiniai esantys aprašomos funkcijos bloke. Lambda išraiškos funkcijos kūnas gali būti sudarytas iš vieno sakinio arba kelių sakinių.</p><p>Jeigu naudojame vieną sakinį lambda išraišką galime aprašyti taip:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Funkcinis_Interfeisas</span> egzempliorius <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sveikas pasauli!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Jeigu naudojame kelis sakinius lambda išraišką galime aprašyti taip:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Funkcinis_Interfeisas</span> egzempliorius <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sveikas pasauli!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Aš jau naudoju lambda išraiškas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pavyzdžiui turime interfeisą Greeting:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Greeting</span><span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tada lambda išraišką galime aprašyti taip:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Greeting</span> greeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sveikas pasauli!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Sukurtas greeting egzempliorius. Panaudojus jį iškviečiame metodą perform(); kaip ir įprasta:</span>
greeting<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tada bus įvykdoma Lambda išraiška ir į ekraną išvedamas tekstas &quot;Sveikas pasauli!!!&quot;</p>`,13),_={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},S={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},T={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=45&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: API",target:"_blank",rel:"noopener noreferrer"},J=e(`<ul><li><code>Function&lt;T, R&gt;</code> priima parametrą T, grąžina rezultatą R.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Funtion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> funkcija <span class="token operator">=</span> i<span class="token operator">-&gt;</span> <span class="token string">&quot;Įvedėte&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>BiFunction&lt;T, U, R&gt;</code> priima parametrus T ir U, grąžina rezultatą R.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BiFuntion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> duParametraiFunkcija <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Suma:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>Consumer&lt;T&gt;</code> priima parametrą T, grąžina rezultatą void</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span> vykdytojas <span class="token operator">=</span> i <span class="token operator">-&gt;</span> <span class="token class-name">Sysyem</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>Supplier&lt;T&gt;</code> nieko priima, grąžina rezultatą T</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span> isduodantysis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Math<span class="token punctuation">.</span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Predicate&lt;T&gt;</code> priima parametrą T, grąžina rezultatą boolean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predikatas <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),L={href:"https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},K=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// generic interfeisas su 2 parametrais</span>
<span class="token comment">// T - perduodamas parametras</span>
<span class="token comment">// R - parametras skirtas rezultatui grąžinti</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">Funkcija</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
  <span class="token comment">// abstraktus metodas priimantis vieną parametrą T</span>
  <span class="token comment">// ir gražinantis rezultą R</span>
  <span class="token class-name">R</span> <span class="token function">pateikti</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">// Sukurto funkcinio interfeiso panaudojimas</span>
<span class="token class-name">Funkcija</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> funkcija <span class="token operator">=</span> <span class="token punctuation">(</span>parametras<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> parametras<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Sutrumpintas būdas jeigu Lambda išraiška yra vieno sakinio     </span>
<span class="token class-name">Funkcija</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> funkcija <span class="token operator">=</span> parametras <span class="token operator">-&gt;</span> parametras<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q=a("strong",null,"@FunctionalInterface",-1),x={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},z={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},D=a("p",null,"Geroji praktika yra naudoti Lambda išraiškas tik vieno sakinio. Kodėl privalome tai daryti, o todėl jog Lambda skirta supaprastinti kodo skaitomumą ir lengvą kodo derinimą įvykus klaidai reaguoti į ją. Panašiai kaip ir UNIT testai, rekomenduojama rašyti tik vieną assert metodą.",-1),N=a("h3",{id:"java-metodo-nuoroda",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java-metodo-nuoroda","aria-hidden":"true"},"#"),n(" Java metodo nuoroda")],-1),P={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},M={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=31&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: JDK",target:"_blank",rel:"noopener noreferrer"},G=e(`<ol><li>Nuoroda į statinį metodą. Sintaksė: <code>&lt;KlasėKurYraMetodas&gt;::&lt;statinio_metodo_pavadinimas&gt;(pvz. MethodReference::saySomething)</code>:</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Sayable</span><span class="token punctuation">{</span>  
    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReference</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, this is static method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// Nuoroda į statinį metodą </span>
        <span class="token class-name">Sayable</span> sayable <span class="token operator">=</span> <span class="token class-name">MethodReference</span><span class="token operator">::</span><span class="token function">saySomething</span><span class="token punctuation">;</span>  
        <span class="token comment">// Iškviečiamas interfeiso metodas </span>
        sayable<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Nuoroda į metodą naudojant klasės egzempliorių/objektą. Sintaksė: egzemplioriusKurYraAprašytasMetodas::egzemplioriausMetodas (pvz. <strong>methodReference::saySomething</strong>):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Sayable</span><span class="token punctuation">{</span>  
    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceMethodReference</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, this is non-static method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">InstanceMethodReference</span> methodReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceMethodReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Kuriamas objektas  </span>
           <span class="token comment">// Nuoroda iš nestatinio metodo naudojant objekto nuorodą </span>
            <span class="token class-name">Sayable</span> sayable <span class="token operator">=</span> methodReference<span class="token operator">::</span><span class="token function">saySomething</span><span class="token punctuation">;</span>  
            <span class="token comment">// Iškviečiamas interfeiso metodas</span>
            sayable<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment">// Nuoroda iš nestatinio metodo naudojant anoniminį objekto egzempliorių   </span>
            <span class="token class-name">Sayable</span> sayable2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceMethodReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">saySomething</span><span class="token punctuation">;</span> <span class="token comment">// Galima naudoti ir anoniminį klasės egzempliorių  </span>
            <span class="token comment">// Iškviečiamas interfeiso metodas  </span>
            sayable2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Nuorodą į kontruktorių. Sintaksė: KlasėsPavadinimas::new (pvz. <strong>Message::new</strong>):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>essageable<span class="token punctuation">{</span>  
    <span class="token class-name">Message</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">{</span>  
    <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorReference</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">Messageable</span> hello <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>  
        hello<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Laba diena&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),R={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},A={href:"https://vma-test.viko.lt/mod/glossary/showentry.php?eid=32&displayformat=dictionary",title:"Terminų ir santrumpų žodynas: Java",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>Įprastinis grafinės sąsajos komponento interfeiso įvykio interfeiso aprašymas vietoj anoniminės klasės naudojama Lambda išraiška supaprastina kodo skaitomumą:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Java 7</span>
<span class="token class-name">ActionListener</span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span> 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//Java 8</span>
<span class="token class-name">ActionListener</span> al8 <span class="token operator">=</span> e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Teksto išvedimas į ekraną:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Labas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Viso gero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Java 7</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Java 8</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pavyzdys rušiuoti tekstui:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Java 7</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Java 8</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// arba naudoti metodo nuoroda ir nuo JDK 1.8 versijos</span>
<span class="token comment">// įvestą interfeiso Comparator metodą comparingInt</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rūšiuoti tekstą pagal du parametrus naudojant savo sukurtą klasę Person:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Java 7</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p1<span class="token punctuation">,</span> <span class="token class-name">Person</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Java 8 naudojant metodo nuorodą</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getLastName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getFirstName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function F(E,B){const s=c("ExternalLinkIcon");return o(),i("div",null,[a("p",null,[n("Lambda išraiškos (angl. lambda expressions) atsirado nuo "),a("a",u,[n("JDK"),t(s)]),n(" 1.8 versijos. Šis atnaujinimas įvedė į programavimo kalbą "),a("a",r,[n("Java"),t(s)]),n(" naujų vėjų. Tai vienas iš didžiausių pokyčių per pastaruosius metus, kai 1.5 "),a("a",k,[n("JDK"),t(s)]),n(" buvo pasiūlytas "),a("a",d,[n("generic"),t(s)]),n(" tipas tai buvo vienas iš didžiausių pokyčių, kuris pakeitė kodo rašymo stilių. Taip pat dalis karkasų buvo perrašytų naudojant Lambda išraiškas, kad išvengtų vykdymo metu įvykstančių klaidų pvz. ClassCastException, kuri įvykdavo dėl kolekcijoje esančio elemento tipo konversijos. Kodėl Lambda išraiškos yra naudojamos?")]),a("ul",null,[m,v,a("li",null,[n("Sukurti "),a("a",g,[n("APIs"),t(s)]),n(" ir bibliotekos yra aiškesnės struktūros, todėl yra žymiai lengviau jais pasinaudoti (angl. Easy-to-use).")]),b]),y,a("p",null,[n("Kodo struktūra naudojant "),a("a",f,[n("Java JDK"),t(s)]),n(" 1.7 versiją, kada dar nebuvo lambda išraiškų.")]),h,a("p",null,[n("Turint 1.7 "),a("a",j,[n("JDK"),t(s)]),n(" versiją metodui perduoti parametrą kaip funkciją su skirtinga elgsena yra įmanomas naudojant interfeisus. Kaip tai atrodytų programiškai? Privalome modifikuoti klasę Greeter taip:")]),w,a("p",null,[n("Lambda supaprastina panaudojimą lyginant su "),a("a",_,[n("JDK"),t(s)]),n(" 1.7 versija, kur papildomai privaloma aprašyti atskiras klases ir jose aprašyti metodo logiką. Kiekvienai skirtingai funkcijai privalome sukurti atskirą įprastinę klasę arba anoniminę klasę. Turint Lambda viskas daug supaprastėjo pakanka turėti funkcinį interfeisą ir vietoj klasių kūrimo pakanka kurti Lambda išraiškas ir jas panaudoti pagal poreikį. Taip pat vienas iš esminių pliusų jog Lambda išraiškos iš dalies įgalino funkcinį programavimą. Šiam tikslui pasiekti buvo sukurtas "),a("a",S,[n("java"),t(s)]),n(".util.Function.*; karkasas ("),a("a",T,[n("API"),t(s)]),n(") skirta darbui su funkciniais interfeisas. Kad kiekvienai situacijai nekurti individualaus interfeiso siūloma naudoti esamuosius:")]),J,a("p",null,[n("Daugiau interfeisų rasite čią: "),a("a",L,[n("https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"),t(s)]),n(".")]),a("p",null,[n("Sukurti funkcinį interfeisą yra labai paprasta, nes tai yra paprasčiausias "),a("a",I,[n("Java"),t(s)]),n(" interfeisas turintis nedaugiau nei vieną abstraktų metodą pvz:")]),K,a("p",null,[n("Anotacija "),q,n(" privalote pažymėti interfeisą tuo atveju jeigu norite būti užtikrinti, kad jūsų interfeisas turės tik vieną abstraktų metodą ko ir reikia, kad tai būtų funkcinis interfeisas. Papildomai aprašomai funkcinio interfeiso klasėje galite turėti: default, static ir private metodus nuo "),a("a",x,[n("JDK"),t(s)]),n(" 1.8+. Visi interfeisai iš ankstesnių versijų nei "),a("a",z,[n("JDK"),t(s)]),n(" 1.8, kurie turi vieną abstraktų interfeisą gali būti naudojanti rašant Lambda išraiškas.")]),D,N,a("p",null,[a("a",P,[n("Java"),t(s)]),n(" suteikia naują galimybę nuo "),a("a",M,[n("JDK"),t(s)]),n(" 1.8 vadinamą metodo nuorodą. Tai kompaktiška išraiška ir lengvai pakeičiama egzistuojanti Lambda išraiška į metodo nuorodą. Dažnai metodo nuoroda supaprastina skaitomumą, prieš mokinantis Lambda išraiškas rekomenduojama gerai susipažinti kaip veikia ir kaip aprašomos Lambda išraiškos, o tik tada pereiti į dar paprastesnį aprašymo būdą tai naudoti metodo nuorodą. Daugelis modernių programavimo IDE pateikia siūlymus supaprastinti kodą ir pakeisti esamas Lambda išraiškas į metodo nuorodas. Metodų nuorodos yra skirstomos į tris skirtingas kategorijas:")]),G,a("p",null,[a("strong",null,[n("Palyginimas tarp "),a("a",R,[n("Java"),t(s)]),n(" 7 ir "),a("a",A,[n("Java"),t(s)]),n(" 8 įvedūs Lambda išraiškas")])]),C])}const W=p(l,[["render",F],["__file","lambda.html.vue"]]);export{W as default};
